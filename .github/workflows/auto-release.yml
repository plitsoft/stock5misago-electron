name: Auto Release

on:
  push:
    branches:
      - main

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Find merged PR
        id: find_pr
        run: |
          # Í∞ÄÏû• ÏµúÍ∑º Ïª§Î∞ãÏùò Î©îÏãúÏßÄÏóêÏÑú PR Î≤àÌò∏ Ï∂îÏ∂ú
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $COMMIT_MESSAGE"
          
          # "Merge pull request #123" ÌòïÌÉúÏóêÏÑú PR Î≤àÌò∏ Ï∂îÏ∂ú
          if [[ "$COMMIT_MESSAGE" =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
            PR_NUMBER=${BASH_REMATCH[1]}
            echo "Found PR #$PR_NUMBER"
          else
            # "Feature xyz (#123)" ÌòïÌÉúÏóêÏÑúÎèÑ ÏãúÎèÑ
            if [[ "$COMMIT_MESSAGE" =~ \(\#([0-9]+)\) ]]; then
              PR_NUMBER=${BASH_REMATCH[1]}
              echo "Found PR #$PR_NUMBER from commit title"
            else
              echo "‚ùå No PR number found in commit message"
              echo "pr_found=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_found=true" >> $GITHUB_OUTPUT

      - name: Get PR labels
        if: steps.find_pr.outputs.pr_found == 'true'
        id: get_labels
        run: |
          PR_NUMBER=${{ steps.find_pr.outputs.pr_number }}
          echo "Getting labels for PR #$PR_NUMBER"
          
          # GitHub APIÎ°ú PR Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (HTTP ÏÉÅÌÉú ÏΩîÎìú Ìè¨Ìï®)
          HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          
          # HTTP ÏÉÅÌÉú ÏΩîÎìú Î∂ÑÎ¶¨
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
          RESPONSE=$(echo "$HTTP_RESPONSE" | head -n -1)
          
          if [[ "$HTTP_STATUS" -ne 200 ]]; then
            echo "‚ùå GitHub API call failed with status: $HTTP_STATUS"
            echo "Response: $RESPONSE"
            echo "labels=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # API ÏùëÎãµ Ïú†Ìö®ÏÑ± Ï≤¥ÌÅ¨
          if ! echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
            echo "‚ùå Invalid JSON response from GitHub API"
            echo "labels=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # ÎùºÎ≤® Ï∂îÏ∂ú
          if ! LABELS=$(echo "$RESPONSE" | jq -r '.labels[].name' 2>/dev/null | tr '\n' ' '); then
            echo "‚ùå Failed to extract labels from PR response"
            echo "labels=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "PR Labels: $LABELS"
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Install Node.js
        if: steps.find_pr.outputs.pr_found == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        if: steps.find_pr.outputs.pr_found == 'true'
        run: npm ci

      - name: Determine version bump type
        if: steps.find_pr.outputs.pr_found == 'true'
        id: bump_version
        run: |
          LABELS="${{ steps.get_labels.outputs.labels }}"
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          echo "PR Labels: '$LABELS'"
          
          # ÎùºÎ≤®Ïù¥ ÎπÑÏñ¥ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
          if [[ -z "$LABELS" || "$LABELS" == " " ]]; then
            echo "‚ùå No labels found for PR #$PR_NUMBER"
            echo "   Please add one of: major, minor, patch, skip-release"
            exit 0
          fi
          
          # Î¶¥Î¶¨Ï¶à ÎùºÎ≤® Í∞úÏàò Ï≤¥ÌÅ¨
          RELEASE_LABELS=0
          BUMP_TYPE=""
          
          if [[ "$LABELS" == *"major"* ]]; then
            BUMP_TYPE="major"
            ((RELEASE_LABELS++))
          fi
          
          if [[ "$LABELS" == *"minor"* ]]; then
            [[ -z "$BUMP_TYPE" ]] && BUMP_TYPE="minor"
            ((RELEASE_LABELS++))
          fi
          
          if [[ "$LABELS" == *"patch"* ]]; then
            [[ -z "$BUMP_TYPE" ]] && BUMP_TYPE="patch"
            ((RELEASE_LABELS++))
          fi
          
          if [[ "$LABELS" == *"skip-release"* ]]; then
            [[ -z "$BUMP_TYPE" ]] && BUMP_TYPE="skip-release"
            ((RELEASE_LABELS++))
          fi
          
          # Ï§ëÎ≥µ ÎùºÎ≤® Ï≤¥ÌÅ¨
          if [[ $RELEASE_LABELS -gt 1 ]]; then
            echo "‚ùå Multiple release labels found in PR #$PR_NUMBER: $LABELS"
            echo "   Please use only ONE of: major, minor, patch, skip-release"
            exit 0
          fi
          
          # Î¶¥Î¶¨Ï¶à ÎùºÎ≤®Ïù¥ ÏóÜÎäî Í≤ΩÏö∞
          if [[ $RELEASE_LABELS -eq 0 ]]; then
            echo "‚ùå No release label found in PR #$PR_NUMBER"
            echo "   Available labels: $LABELS"
            echo "   Please add one of: major, minor, patch, skip-release"
            exit 0
          fi
          
          # skip-release ÎùºÎ≤®Ïù∏ Í≤ΩÏö∞
          if [[ "$BUMP_TYPE" == "skip-release" ]]; then
            echo "üîÑ Skip-release label found for PR #$PR_NUMBER"
            echo "‚è≠Ô∏è  Skipping version bump as requested"
            echo "‚úÖ PR processed successfully without version update"
            exit 0
          fi
          
          echo "üîÑ Bumping $BUMP_TYPE version for PR #$PR_NUMBER..."
          
          # ÌòÑÏû¨ Î≤ÑÏ†Ñ Í∞ÄÏ†∏Ïò§Í∏∞
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # npm versionÏúºÎ°ú Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏
          npm version $BUMP_TYPE --no-git-tag-version
          
          # ÏÉà Î≤ÑÏ†Ñ Í∞ÄÏ†∏Ïò§Í∏∞
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # GitÏóê Ïª§Î∞ã
          git add package.json package-lock.json
          git commit -m "$(cat <<EOF
          chore: bump version to $NEW_VERSION
          
          Triggered by PR #$PR_NUMBER with '$BUMP_TYPE' label
          
          EOF
          )"
          
          # ÌÉúÍ∑∏ ÏÉùÏÑ±
          NEW_TAG="v$NEW_VERSION"
          git tag $NEW_TAG
          
          # Ìë∏Ïãú
          git push origin main
          git push origin $NEW_TAG
          
          echo "‚úÖ Version bumped to $NEW_VERSION and tagged as $NEW_TAG"
          echo "üöÄ Release workflow will be triggered automatically by the new tag."

